#include<stdio.h>
#include<stdlib.h>
//void insertSort(int a[], int size) {
//	for (int i = 0; i < size; i++) {
//		// 有序 [0, i)
//		// 无序 [i, size)
//		int k = a[i];
//		int j;
//		for (j = i - 1; j >= 0 && k < a[j]; j--) {
//			a[j + 1] = a[j];
//		}
//		a[j + 1] = k;
//	}
//}
//void insertsort(int a[], int size) {
//// 抽出第一张，放入0位置，抽出第二张，放入合适的位置
////	 有序空间[0,i)
////   无序空间[i,size)
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < size; i++) {
//
//		int k = a[i];
//		for (j = i-1; j >= 0 && k< a[j]; j--) {
//			a[j + 1] = a[j];
//		}
//		a[j + 1] = k;
//	}
//	
//}

//v/*oid insertsort(int a[], int size) {
//	for (int i = 0; i < size; i++) {
//		int j = 0;
//		int k = a[i];
//		for (j = i - 1; j >= 0 && k < a[j]; j--) {
//			a[j + 1] = a[j];
//		}
//		a[j + 1] = k;
//	}
//}*/

//void gipwith(int a[], int size, int gap) {
//	for (int i = 0; i < size; i++) {
//		int j = 0;
//		int k = a[i];
//		for (j = i - gap; j >= 0 && k < a[j]; j -= gap) {
//			a[j + gap] = a[j];
//		}
//		a[j + gap] = k;
//	}
//}
//void print(int a[], int  size) {
//	int i = 0;
//	for (i = 0; i < size; i++) {
//		printf("%d ", a[i]);
//	}
//}
//void shellSort(int a[], int size) {
//	int gap = size;
//	while (1) {
//		gap = gap / 3 + 1;	// gap = gap / 2
//		insertSortWithGap(a, size, gap);
//		if (gap == 1) {
//			break;
//		}
//	}
//}

//void shellsort(int a[], int size) {
//	int gap = size;
//	while (1)
//	{
//		gap = gap / 3 + 1;
//		gipwith(a, size, gap);
//		if (gap == 1) {
//			break;
//		}
//	}
//}
//void selectSort(int a[], int size) {
//	for (int i = 0; i < size; i++) {
//		// 无序区间 [0,size - i)
//		// 有序区间 [size - i,size)
//
//		int max = 0;
//		for (int j = 1; j < size - i; j++) {
//			if (a[j] > a[max]) {
//				max = j;
//			}
//		}
//
//		int t = a[max];
//		a[max] = a[size - i - 1];
//		a[size - i - 1] = t;
//	}
//}
void selectsort(int a[], int size) {
	for (int i = 0; i < size; i++)
	{
		int max = a[0];
		for (int j = 1; j < size - 1; j++) {
			if (a[j] < a[max]) {
				max = j;
			}
		}
		int t = a[max];
		a[max] = a[size - 1 - i];
		a[size - 1 - i] = t;
	}
}
int main() 
{
	int a[] = { 2,7,1,3,8,5,9,6,0 };
	int size = sizeof(a) / sizeof(int);
	//insertsort(a, size);
	shellsort(a, size);
	print(a, size);
	return 0;
}
