#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
//
//int main()
//{
//	int *num ;
//	
//	
//	int *ptr = NULL;
//	ptr = (int*)malloc(sizeof(int) * 10);
//	if (NULL != ptr)
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(ptr + i) = 0;
//		}
//	}
//	free(ptr);
//	ptr = NULL;
//
//
//	return 0;
//}
//
//int main()
//{
//	int* p = calloc(10, sizeof(int));
//	if (NULL != p)
//	{
//
//	}
//	free(p);
//
//}


//char* my_strcat(char* dest, const char* src)
//{
//	char* start = dest;
//	assert(dest != NULL && src != NULL);
//	while (*dest != '\0')
//		dest++;
//	while (*src != '\0')
//	{
//		*dest = *src;
//		dest++;
//		src++;
//	}
//	*dest = '\0';
//	return start;
//}
//char* my_strcat(char* dest, const char* src)
//{
//	char* ret = dest;
//	assert(dest != NULL && src != NULL);
//	while (*dest)
//	{
//		dest++;
//	}
//	while ((*dest++ = *src++));
//	return ret;
//}
//int main()
//{
//	char a[20] = "hellow";
//	char b[7] = " bit !";
//	char* c;
//	c = my_strcat(a, b);
//	printf("%s\n", a);
//	system("pause");
//	return 0;
//}

char* my_memcpy(char* dest, const char* src, size_t count)
{
	char* ret = dest;
	assert(dest != NULL && src != NULL);
	while (count)
	{
		*dest++ = *src++;
		
		
		count--;
	}
	*dest = '\0';
	return ret;

}
int main()
{
	char a[20] = "hellow";
	char b[7] = " bit !";
	char* c;
	c = my_memcpy(a, b,5);
	printf("%s\n", a);
//	printf("%s\n", my_memcpy(a, b, 5));
	system("pause");
	

	return 0;
}
