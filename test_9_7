#include<iostream>
using namespace std;
#include<assert.h>
template<class T>
class Seqlist
{
public:
	Seqlist(size_t capacity = 10)
		:_array(new T[capacity])
		,_capacity(capacity)
		,_size(0)
	{}
	Seqlist(size_t n, const T& date = T())
		:_array(new T(n))
		, _capacity(n)
		, _size(n)
	{
		for (size_t i = 0; i < _capacity; ++i)
			_array[i] = date;
	}
		~Seqlist()
		{
			if (_array)
			{
				delete[] _array;
				_array = nullptr;
				_capacity = 0;
				_size = 0;
			}
		}
		void PushBack(const T& date);
		void PopBack();
		size_t Size()const
		{
			return _size;
		}
		size_t Capacity()const
		{
			return _capacity;
		}
		bool Empty()const
		{
			return 0 == _size;
		}
		T& operator[](size_t index)
		{
			assert(index < _size);
				return _array[index];
		}
		const T& operator[](size_t index)const
		{
			assert(index < _size);
			return _array[index];
		}
		void PrintSeqlist()
		{
			for (size_t i = 0; i < _size; ++i)
			{
				cout << _array[i] << " ";
			}
			cout << endl;
		}
private:
	T* _array;
	size_t _capacity;
	size_t _size;
};
template<class T>
void Seqlist<T>::PushBack(const T& date)
{
	_array[_size++] = date;
}
template<class T>
void Seqlist<T>::PopBack()
{
	if (0 == _size)
		return;
	--_size;
}

int main()
{
	Seqlist<int> s1;
	s1.PushBack(1);
	s1.PushBack(1);
	s1.PushBack(2);
	s1.PushBack(3);
	s1.PushBack(4);
	s1.PrintSeqlist();
	s1[0] = 0;
	s1.PrintSeqlist();
	cout << s1.Size() << endl;
	cout << s1.Capacity() << endl;
	cout << s1[3] << endl;

	 Seqlist<int> s3(10, 5);
	 cout << s3[5] << endl;
	 //s3[5] = 10;
	return 0;
}
