#include<iostream>
using namespace std;

//#pragma pack(2)
//struct AA {
//	int a;  //  4
//	char b; // 1+1
//	short c;// 2
//	char d; // 1+1
//};
//int main()
//{
//	cout << sizeof(AA) << endl;//10
//	return 0;
//}
//class B
//{
//};
//
//int main()
//{
//	cout << sizeof(B) << endl;//空类大小在vs中是1个字节
//	return 0;
//}

//#pragma pack(1)
//struct AA {
//	int a; //  4
//	char b; // 1
//	short c;// 2
//	char d; // 1
//};
//int main()
//{
//	cout << sizeof(AA) << endl;//8
//	return 0;
//}
//#pragma pack(4)
//struct AA {
//	int a;   // 4
//	char b;  //1+3
//	short c; //2+2
//	char d;  //1+3
//};
//int main()
//{
//	cout << sizeof(AA) << endl;//12
//	return 0;
//}

//#pragma pack(8)//要求按8字节对齐，计算按小的进行计算
//struct AA {
//	int a;   //4
//	char b;  //1+3
//	short c; //2+2
//	char d; // 1+3
//};
//int main()
//{
//	cout << sizeof(AA) << endl;//12
//	return 0;
//}



//class A
//{
//	char a;
//	double b;//8
//	char c;
//	float d;
//};
//int main()
//{
//	cout << sizeof(A) << endl;//24
//	return 0;
//}

//struct A
//{
//	char a;
//	double b;
//	char c;
//	float d;
//};
//int main()
//{
//	cout << sizeof(A) << endl;//24
//	return 0;
//}

class A
{
public:
	class B
	{
		int a;//4
		double d;//8
	};
private:
	char a;//1+3
	double b;//8
	char c;//1+3
	float d;// 4+4
};
int main()
{
	cout << sizeof(A) << endl;//24
	//一个类的大小，就是其类内的“成员变量”之和不用考虑类内的类；
	cout << sizeof(A::B) << endl;
	return 0;
}
/*
   原则1：数据成员对齐规则：结构(struct)(或联合(union))的数据成员，
第一个数据成员放在offset为0的地方，以后每个数据成员的对齐按照#pragma pack
指定的数值和这个数据成员自身长度中，比较小的那个进行。
   原则2：结构(或联合)的整体对齐规则：在数据成员完成各自对齐之后，
结构(或联合)本身也要进行对齐，对齐将按照#pragma pack
指定的数值和结构(或联合)最大数据成员长度中，比较小的那个进行。
   原则3：结构体作为成员：如果一个结构里有某些结构体成员，
则结构体成员要从其内部最大元素大小的整数倍地址开始存储。
*/
//进行内存对齐，可以提高cpu的访问速度，
//不是所有的硬件平台都能访问任意地址上的任意数据，
//某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常
//所以在进行存储数据是要进行内存对齐，以提高cpu的运行速率。
